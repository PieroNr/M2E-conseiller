@using System.Text.Json
@using M2E_conseiller.Models
@using Smoby.Web.Services
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="scanner">
    @if (SelectedIndex == 0)
    {
        <BlazorBarcodeScanner.ZXing.JS.BarcodeReader
            StartCameraAutomatically="true"
            ShowStart="false"
            ShowReset="false"
            ShowStop="false"
            ShowResult="false"
            Title=""
            ShowToggleTorch="false"
            ShowVideoDeviceList="false"
            OnBarcodeReceived="LocalReceivedBarcodeText"/>
    }
    @if (_showAnimation)
    {
        <div class="animation">
            <lottie-player src="@(_successScan ? "success-scan.json" : "fail-scan.json")" background="transparent" speed="1" style="width: 300px; height: 300px;" autoplay></lottie-player>
            <div class="animation-text">
                <p>@_textToShow</p>
                @if (_successScan)
                {
                    <button class="animation-button" @onclick="() => OnSuccessScan.InvokeAsync()">Consulter</button>
                }
            </div>
        </div>
    }

</div>

@code
{
    [Parameter] public EventCallback<string> OnSuccessScan { get; set; }
    [Parameter] public List<Event> events { get; set; }
    [Parameter] public int SelectedIndex { get; set; }
    private bool _showAnimation = false;
    private bool _successScan = false;
    private QRcodeFormat? _registered;
    private string _textToShow = "";

    private async void LocalReceivedBarcodeText(BarcodeReceivedEventArgs args)
    {
        if (_showAnimation) return;
        try
        {
            _registered = JsonSerializer.Deserialize<QRcodeFormat>(args.BarcodeText);
            if (_registered != null)
            {
                var registeredId = _registered.RegisteredId;
                var eventId = _registered.EventId;
                if (events.Any(e => e.Id == eventId && e.Registered.Any(r => r.Id == registeredId)))
                {
                    if (events.First(e => e.Id == eventId).Registered.First(r => r.Id == registeredId).IsCheckedIn)
                    {
                        _successScan = true;
                        _textToShow = "Vous avez déjà été enregistré";
                    }
                    else
                    {
                        _successScan = true;
                        var registered = events.First(e => e.Id == eventId).Registered.First(r => r.Id == registeredId);
                        if (await ServiceLocator.ConfigurationService.GetFeature("DisplayRegisteredFullName"))
                        {
                            _textToShow = $"Bienvenue {registered.Firstname} {registered.Lastname}";
                        }
                        else
                        {
                            _textToShow = "Bienvenue";
                        }

                        events.First(e => e.Id == eventId).Registered.First(r => r.Id == registeredId).IsCheckedIn = true;
                        await localStorage.SetItemAsync("events", events);
                    }

                    ;
                }
                else if (events.Any(e => e.Id == eventId))
                {
                    _successScan = false;
                    _textToShow = "Vous n'êtes pas inscrit à cet événement";
                }
                else
                {
                    _successScan = false;
                    _textToShow = "Cet événement n'existe pas";
                }
            }
            else
            {
                _successScan = false;
            }
        }
        catch (JsonException)
        {
            _successScan = false;
            _textToShow = "Erreur lors de la lecture du QR Code";
        }

        _showAnimation = true;
        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_showAnimation)
        {
            await JSRuntime.InvokeVoidAsync("startAnimation", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnAnimationComplete()
    {
        _showAnimation = false;
        StateHasChanged();
    }


}