@page "/"
@inject NavigationManager NavManager
@using MudBlazor
@using M2E_conseiller.Models
@using Blazored.LocalStorage
@using Smoby.Web.Services
@inject ILocalStorageService localStorage


<main>
    @if(OnScan || _selectedIndex != 0)
    {
        <Logo OnClick="GoToHome"></Logo>
    }
    <article class="content">
        <div class="index-container">

            <MudCarousel Class="slider" ShowArrows="false" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="false" @bind-SelectedIndex="_selectedIndex" TData="object">
                <MudCarouselItem>
                    @if (OnScan)
                    {
                        <Scanner OnSuccessScan="(string value) => ScanValidated(value)" events="EventList"></Scanner>
                    }
                    else
                    {
                        <Home OnScanActivated="() => OnScan = true"></Home>
                    }
                </MudCarouselItem>
                <MudCarouselItem>
                    <EventList valueScan="@valueScan" events="EventList"></EventList>
                </MudCarouselItem>

            </MudCarousel>

        </div>
    </article>
</main>

    <div class="navbar">
        <NavMenu SelectedIndex="@_selectedIndex" SelectedIndexChanged="UpdateSelectedIndex"></NavMenu>
    </div>


@code {
    [Parameter] public bool OnScan { get; set; }
    [Parameter] public List<Event> EventList { get; set; } = new List<Event>();
    private int _selectedIndex = 0;
    private string valueScan = "";

    private void UpdateSelectedIndex(int index)
    {
        _selectedIndex = index;
    }

   protected override async Task OnInitializedAsync()
    {
        var events = await localStorage.GetItemAsync<List<Event>>("events");
        if (events != null)
        {
            EventList = events;
        }
        
        localStorage.Changed += OnLocalStorageChanged;
        var scannerActivated = await localStorage.GetItemAsync<string>("scannerActivated");
        if (!await ServiceLocator.ConfigurationService.GetFeature("DisplayHome")!)
        {
            OnScan = true;
        }
    }
    
    private async void GoToHome()
    {
        OnScan = false;
        _selectedIndex = 0;
        await localStorage.RemoveItemAsync("scannerActivated");
    }
    
    private void ScanValidated(string value)
    {
        _selectedIndex = 1;
        valueScan = value;
    }
    
    private async void OnLocalStorageChanged(object sender, ChangedEventArgs e)
    {
        if (e.Key == "events")
        {
            var events = await localStorage.GetItemAsync<List<Event>>("events");
            if (events != null)
            {
                EventList = events;
            }
        }
    }

    public void Dispose()
    {
        localStorage.Changed -= OnLocalStorageChanged;
    }

}